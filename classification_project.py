# -*- coding: utf-8 -*-
"""classification_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y6dqjzWAiVIgCEJN-A9dppMSMqfxq1mt
"""

# !nvidia-smi
# !pip install torch transformers pandas scikit-learn

import pandas as pd
import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
from transformers import BertTokenizer, BertForSequenceClassification
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from tqdm import tqdm
import numpy as np
import os

# Vérifier si le GPU est disponible
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(f"Using device: {device}")

# charger les données

data = "/content/train 5.csv"
data = pd.read_csv(data)

data.head()

# Classes cibles
labels = ['Computer Science', 'Physics', 'Mathematics', 'Statistics', 'Quantitative Biology', 'Quantitative Finance']

data[labels] = data[labels].fillna(0)
data['label'] = data[labels].idxmax(axis=1).map(lambda x: labels.index(x))

assert data['label'].min() >= 0 and data['label'].max() < len(labels), "Generated labels contain values outside the expected range [0, 5]"

# Dataset personnalisé
class AbstractDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_len=512):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_len = max_len

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, idx):
        text = str(self.texts[idx])
        label = self.labels[idx]
        encoding = self.tokenizer.encode_plus(
            text,
            add_special_tokens=True,
            max_length=self.max_len,
            return_token_type_ids=False,
            padding='max_length',
            truncation=True,
            return_attention_mask=True,
            return_tensors='pt'
        )
        return {
            'input_ids': encoding['input_ids'].flatten(),
            'attention_mask': encoding['attention_mask'].flatten(),
            'labels': torch.tensor(label, dtype=torch.long)
        }

# Préparer les données
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
texts = data['ABSTRACT'].values
labels_data = data['label'].values

# Diviser les données
train_texts, val_texts, train_labels, val_labels = train_test_split(texts, labels_data, test_size=0.2, random_state=42)

# Créer les datasets
train_dataset = AbstractDataset(train_texts, train_labels, tokenizer)
val_dataset = AbstractDataset(val_texts, val_labels, tokenizer)

# DataLoader
train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=16)

# Modèle
model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=6)
model.to(device)

# Optimiseur et perte
optimizer = torch.optim.AdamW(model.parameters(), lr=2e-5)
criterion = nn.CrossEntropyLoss()

# Entraînement
def train_epoch(model, data_loader, optimizer, device):
    model.train()
    total_loss = 0
    for batch in tqdm(data_loader, desc="Training"):
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['labels'].to(device)

        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = outputs.loss
        total_loss += loss.item()

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    return total_loss / len(data_loader)

    # Évaluation
def eval_model(model, data_loader, device):
    model.eval()
    predictions = []
    true_labels = []
    with torch.no_grad():
        for batch in tqdm(data_loader, desc="Evaluating"):
            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)
            # Renommer la variable locale pour éviter de masquer la liste globale des noms de classes
            true_batch_labels = batch['labels'].to(device)

            outputs = model(input_ids, attention_mask=attention_mask)
            _, preds = torch.max(outputs.logits, dim=1)
            predictions.extend(preds.cpu().numpy())
            true_labels.extend(true_batch_labels.cpu().numpy())

    all_possible_labels = list(range(len(labels)))
    return accuracy_score(true_labels, predictions), classification_report(true_labels, predictions, target_names=labels, labels=all_possible_labels)

# Boucle d'entraînement
epochs = 3
for epoch in range(epochs):
    print(f'\nEpoch {epoch+1}/{epochs}')
    train_loss = train_epoch(model, train_loader, optimizer, device)
    val_acc, val_report = eval_model(model, val_loader, device)
    print(f'Train Loss: {train_loss:.4f}')
    print(f'Validation Accuracy: {val_acc:.4f}')
    print(val_report)

# sauvegarder le modele

model_save_path = 'abstract_classifier.pt'
torch.save(model.state_dict(), model_save_path)
from google.colab import files
files.download(model_save_path)

# Sauvegarder le model sur le drive

model_save_path = '/content/drive/MyDrive/abstract_classifier.pt'
torch.save(model.state_dict(), model_save_path)

print(f"modèle save dans le drive à {model_save_path}")
from google.colab import drive
drive.mount('/content/drive')